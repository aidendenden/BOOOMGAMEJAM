//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/ScriptByAi/test.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Test: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Test()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""test"",
    ""maps"": [
        {
            ""name"": ""Rock"",
            ""id"": ""c1b0b394-a55b-4126-b6f5-da97d71644da"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2526202b-9f6b-4fcd-8932-5f202a1520d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Say\""HI\"""",
                    ""type"": ""Button"",
                    ""id"": ""33de15ca-bf9a-49e4-b342-a4058fae3aef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb0bc48b-2396-4114-bc3e-8f4cf8699b62"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""461b4ce5-637b-4f9c-abd9-bb6859a17b9f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Say\""HI\"""",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rock
        m_Rock = asset.FindActionMap("Rock", throwIfNotFound: true);
        m_Rock_Jump = m_Rock.FindAction("Jump", throwIfNotFound: true);
        m_Rock_SayHI = m_Rock.FindAction("SayHI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rock
    private readonly InputActionMap m_Rock;
    private List<IRockActions> m_RockActionsCallbackInterfaces = new List<IRockActions>();
    private readonly InputAction m_Rock_Jump;
    private readonly InputAction m_Rock_SayHI;
    public struct RockActions
    {
        private @Test m_Wrapper;
        public RockActions(@Test wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Rock_Jump;
        public InputAction @SayHI => m_Wrapper.m_Rock_SayHI;
        public InputActionMap Get() { return m_Wrapper.m_Rock; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RockActions set) { return set.Get(); }
        public void AddCallbacks(IRockActions instance)
        {
            if (instance == null || m_Wrapper.m_RockActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RockActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @SayHI.started += instance.OnSayHI;
            @SayHI.performed += instance.OnSayHI;
            @SayHI.canceled += instance.OnSayHI;
        }

        private void UnregisterCallbacks(IRockActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @SayHI.started -= instance.OnSayHI;
            @SayHI.performed -= instance.OnSayHI;
            @SayHI.canceled -= instance.OnSayHI;
        }

        public void RemoveCallbacks(IRockActions instance)
        {
            if (m_Wrapper.m_RockActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRockActions instance)
        {
            foreach (var item in m_Wrapper.m_RockActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RockActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RockActions @Rock => new RockActions(this);
    public interface IRockActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnSayHI(InputAction.CallbackContext context);
    }
}
